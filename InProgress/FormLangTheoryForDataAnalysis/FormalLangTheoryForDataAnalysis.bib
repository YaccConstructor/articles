@inproceedings{10.1145/3408877.3432464,
author = {Romero, Julien},
title = {Pyformlang: An Educational Library for Formal Language Manipulation},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432464},
doi = {10.1145/3408877.3432464},
abstract = {Formal languages are widely studied, taught and used in computer science. However, only a small part of this domain is brought to a broader audience, and students often have no practical experience in their curriculum. In this tool paper, we introduce Pyformlang, a practical and pedagogical Python library for formal languages. Our library implements the most common algorithms of the domain, accessible by an easy-to-use interface. The code is written exclusively in Python3, with a clear structure, so as to allow students to play and learn with it.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {576â€“582},
numpages = {7},
keywords = {formal languages, python, library, education},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@Inbook{Figueira2022,
author="Figueira, Diego",
editor="{\v{S}}imkus, Mantas
and Varzinczak, Ivan",
title="Foundations of Graph Path Query Languages",
bookTitle="Reasoning Web. Declarative Artificial Intelligence : 17th International Summer School 2021, Leuven, Belgium, September 8--15, 2021, Tutorial Lectures",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="1--21",
abstract="We survey some foundational results on querying graph-structured data. We focus on general-purpose navigational query languages, such as regular path queries and its extensions with conjunctions, inverses, and path comparisons. We study complexity, expressive power, and static analysis. The course material should be useful to anyone with an interest in query languages for graph structured data, and more broadly in foundational aspects of database theory.",
isbn="978-3-030-95481-9",
doi="10.1007/978-3-030-95481-9_1",
url="https://doi.org/10.1007/978-3-030-95481-9_1"
}

@inproceedings{10.1145/3327964.3328503,
author = {Mishin, Nikita and Sokolov, Iaroslav and Spirin, Egor and Kutuev, Vladimir and Nemchinov, Egor and Gorbatyuk, Sergey and Grigorev, Semyon},
title = {Evaluation of the Context-Free Path Querying Algorithm Based on Matrix Multiplication},
year = {2019},
isbn = {9781450367899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3327964.3328503},
doi = {10.1145/3327964.3328503},
abstract = {Recently proposed matrix multiplication based algorithm for context-free path querying (CFPQ) offloads the most performance-critical parts onto boolean matrices multiplication. Thus, it is possible to achieve high performance of CFPQ by means of modern parallel hardware and software. In this paper, we provide results of empirical performance comparison of different implementations of this algorithm on both real-world data and synthetic data for the worst cases.},
booktitle = {Proceedings of the 2nd Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
articleno = {12},
numpages = {5},
keywords = {transitive closure, matrix multiplication, graph databases, context-free grammar, boolean matrix, GPGPU, Context-free path querying, CUDA},
location = {Amsterdam, Netherlands},
series = {GRADES-NDA'19}
}

@book{10.5555/2501720,
author = {Parr, Terence},
title = {The Definitive ANTLR 4 Reference},
year = {2013},
isbn = {1934356999},
publisher = {Pragmatic Bookshelf},
edition = {2nd},
abstract = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language--ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features. Build your own languages with ANTLR v4, using ANTLR's new advanced parsing technology. In this book, you'll learn how ANTLR automatically builds a data structure representing the input (parse tree) and generates code that can walk the tree (visitor). You can use that combination to implement data readers, language interpreters, and translators. You'll start by learning how to identify grammar patterns in language reference manuals and then slowly start building increasingly complex grammars. Next, you'll build applications based upon those grammars by walking the automatically generated parse trees. Then you'll tackle some nasty language problems by parsing files containing more than one language (such as XML, Java, and Javadoc). You'll also see how to take absolute control over parsing by embedding Java actions into the grammar. You'll learn directly from well-known parsing expert Terence Parr, the ANTLR creator and project lead. You'll master ANTLR grammar construction and learn how to build language tools using the built-in parse tree visitor mechanism. The book teaches using real-world examples and shows you how to use ANTLR to build such things as a data file reader, a JSON to XML translator, an R parser, and a Java class-interface extractor. This book is your ticket to becoming a parsing guru!What You Need: ANTLR 4.0 and above. Java development tools. Ant build system optional (needed for building ANTLR from source)}
}