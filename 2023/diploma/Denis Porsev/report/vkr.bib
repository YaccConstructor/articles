% ===============================
% =========== intro =============
% ===============================

@article{intro_rpq_term_appear1,
  author     = {Florescu, Daniela and Levy, Alon and Mendelzon, Alberto},
  title      = {Database Techniques for the World-Wide Web: A Survey},
  year       = {1998},
  issue_date = {Sept. 1, 1998},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {27},
  number     = {3},
  issn       = {0163-5808},
  url        = {https://doi.org/10.1145/290593.290605},
  doi        = {10.1145/290593.290605},
  journal    = {SIGMOD Rec.},
  month      = {sep},
  pages      = {59–74},
  numpages   = {16}
}

@article{intro_rpq_term_appear2,
  author     = {Mendelzon, Alberto O. and Wood, Peter T.},
  title      = {Finding Regular Simple Paths in Graph Databases},
  year       = {1995},
  issue_date = {Dec. 1995},
  publisher  = {Society for Industrial and Applied Mathematics},
  address    = {USA},
  volume     = {24},
  number     = {6},
  issn       = {0097-5397},
  url        = {https://doi.org/10.1137/S009753979122370X},
  doi        = {10.1137/S009753979122370X},
  abstract   = {We consider the following problem: given a labelled directed graph $G$ and a regular expression $R$, find all pairs of nodes connected by a simple path such that the concatenation of the labels along the path satisfies $R$. The problem is motivated by the observation that many recursive queries in relational databases can be expressed in this form, and by the implementation of a query language, ${bf G}^+$, based on this observation. We show that the problem is in general intractable, but present an algorithm than runs in polynomial time in the size of the graph when the regular expression and the graph are free of conflicts. We also present a class of languages whose expressions can always be evaluated in time polynomial in the size of both the graph and the expression, and characterize syntactically the expressions for such languages.},
  journal    = {SIAM J. Comput.},
  month      = {dec},
  pages      = {1235–1258},
  numpages   = {24},
  keywords   = {polynomial-time algorithms, regular expressions, labelled directed graphs, NP-completeness, simple paths}
}

@inproceedings{intro_rpq_massive_graphs,
  author    = {Nol\'{e}, Maurizio and Sartiani, Carlo},
  title     = {Regular Path Queries on Massive Graphs},
  year      = {2016},
  isbn      = {9781450342155},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2949689.2949711},
  doi       = {10.1145/2949689.2949711},
  abstract  = {Regular Path Queries (RPQs) represent a powerful tool for querying graph databases and are of particular interest, because they form the building blocks of other query languages, and because they can be used in many theoretical or practical contexts for different purposes.In this paper we present a novel system for processing regular path queries on massive data graphs. As confirmed by an extensive experimental evaluation, our system scales linearly with the number of vertices and/or edges, and it can efficiently query graphs up to a billion vertices and 100 billion edges.},
  booktitle = {Proceedings of the 28th International Conference on Scientific and Statistical Database Management},
  articleno = {13},
  numpages  = {12},
  location  = {Budapest, Hungary},
  series    = {SSDBM '16}
}

@inproceedings{intro_cfpq_code_analysis,
  author    = {Kuijpers, Jochem and Fletcher, George and Yakovets, Nikolay and Lindaaker, Tobias},
  title     = {An Experimental Study of Context-Free Path Query Evaluation Methods},
  year      = {2019},
  isbn      = {9781450362160},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3335783.3335791},
  doi       = {10.1145/3335783.3335791},
  abstract  = {Context-free path queries extend regular path queries for increased expressiveness. A context-free grammar is used to recognize accepted paths by their label strings, or traces. Such queries arise naturally in graph analytics, e.g., in bioinformatics applications. Currently, the practical performance of methods for context-free path query evaluation is not well understood. In this work, we study three state of the art context-free path query evaluation methods. We measure the performance of these methods on diverse query workloads on various data sets and compare their results. We showcase how these evaluation methods scale as graphs get bigger and queries become larger or more ambiguous. We conclude that state of the art solutions are not able to cope with large graphs as found in practice.},
  booktitle = {Proceedings of the 31st International Conference on Scientific and Statistical Database Management},
  pages     = {121–132},
  numpages  = {12},
  location  = {Santa Cruz, CA, USA},
  series    = {SSDBM '19}
}

@article{intro_cfpq_bioinformatics,
  url         = {https://doi.org/10.1515/jib-2008-100},
  title       = {Subgraph Queries by Context-free Grammars},
  title       = {},
  author      = {Petteri Sevon and Lauri Eronen},
  pages       = {157--172},
  volume      = {5},
  number      = {2},
  journal     = {Journal of Integrative Bioinformatics},
  doi         = {doi:10.1515/jib-2008-100},
  year        = {2008},
  lastchecked = {2023-01-08}
}

@inproceedings{intro_cfpq_ineffective,
  author    = {Kuijpers, Jochem and Fletcher, George and Yakovets, Nikolay and Lindaaker, Tobias},
  title     = {An Experimental Study of Context-Free Path Query Evaluation Methods},
  year      = {2019},
  isbn      = {9781450362160},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3335783.3335791},
  doi       = {10.1145/3335783.3335791},
  abstract  = {Context-free path queries extend regular path queries for increased expressiveness. A context-free grammar is used to recognize accepted paths by their label strings, or traces. Such queries arise naturally in graph analytics, e.g., in bioinformatics applications. Currently, the practical performance of methods for context-free path query evaluation is not well understood. In this work, we study three state of the art context-free path query evaluation methods. We measure the performance of these methods on diverse query workloads on various data sets and compare their results. We showcase how these evaluation methods scale as graphs get bigger and queries become larger or more ambiguous. We conclude that state of the art solutions are not able to cope with large graphs as found in practice.},
  booktitle = {Proceedings of the 31st International Conference on Scientific and Statistical Database Management},
  pages     = {121–132},
  numpages  = {12},
  location  = {Santa Cruz, CA, USA},
  series    = {SSDBM '19}
}

@inproceedings{intro_rpq_ineffective,
  author    = {Yakovets, Nikolay and Godfrey, Parke and Gryz, Jarek},
  title     = {Query Planning for Evaluating SPARQL Property Paths},
  year      = {2016},
  isbn      = {9781450335317},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2882903.2882944},
  doi       = {10.1145/2882903.2882944},
  abstract  = {The extension of SPARQL in version 1.1 with property paths offers a type of regular path query for RDF graph databases. Such queries are difficult to optimize and evaluate efficiently, however. We have embarked on a project, Waveguide, to build a cost-based optimizer for SPARQL queries with property paths. Waveguide builds a query plan--- which we call a waveplan (WP)--- which guides the query evaluation. There are numerous choices in the construction of a plan, and a number of optimization methods, so the space of plans for a query can be quite large. Execution costs of plans for the same query can vary by orders of magnitude. A WGP's costs can be estimated, which opens the way to cost-based optimization. We demonstrate that the plan space of Waveguide properly subsumes existing techniques and that the new plans it adds are relevant.},
  booktitle = {Proceedings of the 2016 International Conference on Management of Data},
  pages     = {1875–1889},
  numpages  = {15},
  keywords  = {property paths, regular path queries, query optimization, sparql, rdf},
  location  = {San Francisco, California, USA},
  series    = {SIGMOD '16}
}

@misc{intro_sparql,
  added-at     = {2015-03-16T13:26:02.000+0100},
  author       = {Prud'hommeaux, Eric and Seaborne, Andy},
  biburl       = {https://www.bibsonomy.org/bibtex/2c026a93cda06c2dfa18655bf87e8f2ad/asalber},
  howpublished = {{W3C Recommendation}},
  interhash    = {dc198da0f907f0129249cab866bbe3d4},
  intrahash    = {c026a93cda06c2dfa18655bf87e8f2ad},
  keywords     = {RDF ontologies semantic-web},
  timestamp    = {2015-03-16T13:28:58.000+0100},
  title        = {{SPARQL Query Language for RDF}},
  url          = {http://www.w3.org/TR/rdf-sparql-query/},
  year         = 2008
}

@inproceedings{intro_graphblas,
  author    = {Buluç, Aydin and Mattson, Tim and McMillan, Scott and Moreira, José and Yang, Carl},
  booktitle = {2017 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
  title     = {Design of the GraphBLAS API for C},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {643-652},
  doi       = {10.1109/IPDPSW.2017.117}
}

@article{intro_suitesparse,
  author     = {Davis, Timothy A.},
  title      = {Algorithm 1000: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},
  year       = {2019},
  issue_date = {December 2019},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {45},
  number     = {4},
  issn       = {0098-3500},
  url        = {https://doi.org/10.1145/3322125},
  doi        = {10.1145/3322125},
  abstract   = {SuiteSparse:GraphBLAS is a full implementation of the GraphBLAS standard, which defines a set of sparse matrix operations on an extended algebra of semirings using an almost unlimited variety of operators and types. When applied to sparse adjacency matrices, these algebraic operations are equivalent to computations on graphs. GraphBLAS provides a powerful and expressive framework for creating graph algorithms based on the elegant mathematics of sparse matrix operations on a semiring. An overview of the GraphBLAS specification is given, followed by a description of the key features and performance of its implementation in the SuiteSparse:GraphBLAS package.},
  journal    = {ACM Trans. Math. Softw.},
  month      = {dec},
  articleno  = {44},
  numpages   = {25},
  keywords   = {Graph algorithms, sparse matrices, GraphBLAS}
}

@inproceedings{intro_graphlastd,
  author    = {Mattson, Tim and Bader, David and Berry, Jon and Buluc, Aydin and Dongarra, Jack and Faloutsos, Christos and Feo, John and Gilbert, John and Gonzalez, Joseph and Hendrickson, Bruce and Kepner, Jeremy and Leiserson, Charles and Lumsdaine, Andrew and Padua, David and Poole, Stephen and Reinhardt, Steve and Stonebraker, Mike and Wallach, Steve and Yoo, Andrew},
  booktitle = {2013 IEEE High Performance Extreme Computing Conference (HPEC)},
  title     = {Standards for graph algorithm primitives},
  year      = {2013},
  volume    = {},
  number    = {},
  pages     = {1-2},
  doi       = {10.1109/HPEC.2013.6670338}
}


@inproceedings{intro_datalogrpq,
  author    = {Dey, Saumen and Cuevas-Vicentt\'{\i}n, V\'{\i}ctor and K\"{o}hler, Sven and Gribkoff, Eric and Wang, Michael and Lud\"{a}scher, Bertram},
  title     = {On Implementing Provenance-Aware Regular Path Queries with Relational Query Engines},
  year      = {2013},
  isbn      = {9781450315999},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2457317.2457353},
  doi       = {10.1145/2457317.2457353},
  abstract  = {Use of graphs is growing rapidly in social networks, semantic web, biological databases, scientific workflow provenance, and other areas. Regular Path Queries (RPQs) can be seen as a core graph query language to answer pattern-based reachability queries. Unfortunately, the number of freely available systems for querying graphs using RPQs is rather limited, and available implementations do not provide direct support for a number of desirable variants of RPQs, e.g., to return those edges that are contained in some (or all) paths that match the given regular expression R. Thus, by returning not just a pair (x, y) of end points of paths that match R, but also "witness edges" (u, v) inbetween, our RPQ variants can be understood as returning additional provenance information about the answer (x, y), i.e., those edges (u, v) that are in some (or all) paths from x to y matching R. We propose a number of such RPQ variants and show how they can be implemented using either Datalog or a suitable RDBMS. Our initial experimental results indicate that RPQs and our provenance-aware variants (RPQProv), when implemented using conventional relational technologies, yield reasonable performance even for relatively large graphs. On the other hand, the overhead associated with some of these variants also makes efficient handling of provenance-aware graph queries an interesting challenge for future research.},
  booktitle = {Proceedings of the Joint EDBT/ICDT 2013 Workshops},
  pages     = {214–223},
  numpages  = {10},
  keywords  = {graph querying, regular path queries, datalog},
  location  = {Genoa, Italy},
  series    = {EDBT '13}
}
% ===============================
% =========== task ==============
% ===============================

% ===============================
% ========== related ============
% ===============================

@inbook{related_frequent_fragments,
  author    = {Yan, Xifeng
               and Han, Jiawei},
  editor    = {Aggarwal, Charu C.
               and Wang, Haixun},
  title     = {Graph Indexing},
  booktitle = {Managing and Mining Graph Data},
  year      = {2010},
  publisher = {Springer US},
  address   = {Boston, MA},
  pages     = {161--180},
  abstract  = {Advanced database systems face a great challenge arising from the emergenceof massive, complex structural data in bioinformatics, chem-informatics, busi- ness processes, etc. One of the most important functions needed in these areas is efficient search of complex graph data. Given a graph query, it is desirable to retrieve relevant graphs quickly from a large database via efficient graph indices. This chapter gives an introduction to graph substructure search, approx- imate substructure search and their related graph indexing techniques, particularly feature-based graph indexing.},
  isbn      = {978-1-4419-6045-0},
  doi       = {10.1007/978-1-4419-6045-0_5},
  url       = {https://doi.org/10.1007/978-1-4419-6045-0_5}
}


@inbook{related_fletcher,
  author = {Fletcher, George and Peters, J. and Poulovassilis, Alexandra},
  year   = {2016},
  month  = {03},
  pages  = {},
  title  = {Efficient regular path query evaluation using path indexes}
}

@inproceedings{related_ars,
  title     = {Multiple-Source Context-Free Path Querying in Terms of Linear Algebra},
  author    = {Arseniy Terekhov and Vlada Pogozhelskaya and Vadim Abzalov and Timur Zinnatulin and Semyon V. Grigorev},
  booktitle = {EDBT},
  year      = {2021}
}

@inproceedings{related_kron,
  author = {Orachev, Egor and Epelbaum, Ilya and Azimov, Rustam and Grigorev, Semyon},
  title  = {Context-Free Path Querying by Kronecker Product},
  year   = {2020},
  month  = {08},
  pages  = {49-59},
  isbn   = {978-3-030-54831-5},
  doi    = {10.1007/978-3-030-54832-2_6}
}

@unknown{related_oneforall,
  author = {Shemetova, Ekaterina and Azimov, Rustam and Orachev, Egor and Epelbaum, Ilya and Grigorev, Semyon},
  year   = {2021},
  month  = {03},
  pages  = {},
  title  = {One Algorithm to Evaluate Them All: Unified Linear Algebra Based Approach to Evaluate Both Regular and Context-Free Path Queries}
}

@inproceedings{method_msbfs,
  author    = {Elekes, Márton and Nagy, Attila and Sándor, Dávid and Antal, János Benjamin and Davis, Timothy A. and Szárnyas, Gábor},
  booktitle = {2020 IEEE High Performance Extreme Computing Conference (HPEC)},
  title     = {A GraphBLAS solution to the SIGMOD 2014 Programming Contest using multi-source BFS},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {1-7},
  doi       = {10.1109/HPEC43674.2020.9286186}
}

@inproceedings{time_and_space,
  author    = {Arroyuelo, Diego and Hogan, Aidan and Navarro, Gonzalo and Rojas-Ledesma, Javiel},
  booktitle = {2022 IEEE 38th International Conference on Data Engineering (ICDE)},
  title     = {Time- and Space-Efficient Regular Path Queries},
  year      = {2022},
  volume    = {},
  number    = {},
  pages     = {3091-3105},
  doi       = {10.1109/ICDE53745.2022.00277}
}

@incollection{souffle,
  doi       = {10.1007/978-3-030-39197-3_14},
  url       = {https://doi.org/10.10072F978-3-030-39197-3_14},
  year      = 2020,
  publisher = {Springer International Publishing},
  pages     = {213--221},
  author    = {Ramy Shahin and Marsha Chechik},
  title     = {Variability-Aware Datalog},
  booktitle = {Practical Aspects of Declarative Languages}
}

@misc{method_gb_wiki,
  title        = {GraphBLAS. Wikipedia. The Free Encyclopedia.},
  howpublished = {https://en.wikipedia.org/wiki/GraphBLAS},
  note         = {Accessed: 2023-05-11}
}