@book{robinson2015graph,
  title={Graph Databases: New Opportunities for Connected Data},
  author={Robinson, I. and Webber, J. and Eifrem, E.},
  isbn={9781491930847},
  year={2015},
  publisher={O'Reilly Media}
}

@misc{regex,
      title={One Algorithm to Evaluate Them All: Unified Linear Algebra Based Approach to Evaluate Both Regular and Context-Free Path Queries}, 
      author={Ekaterina Shemetova and Rustam Azimov and Egor Orachev and Ilya Epelbaum and Semyon Grigorev},
      year={2021},
      note = {P. 23},
      archivePrefix={arXiv},
      primaryClass={cs.DB}
}

@inproceedings{Zheng,
 author = {Zheng, Xin and Rugina, Radu},
 title = {Demand-driven Alias Analysis for C},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {197--208},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1328438.1328464},
 doi = {10.1145/1328438.1328464},
 acmid = {1328464},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CFL reachability, alias analysis, demand-driven analysis, memory disambiguation, pointer analysis},
}

@inproceedings{10.1145/2463664.2465216,
author = {Barcel\'{o} Baeza, Pablo},
title = {Querying Graph Databases},
year = {2013},
isbn = {9781450320665},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2463664.2465216},
doi = {10.1145/2463664.2465216},
booktitle = {Proceedings of the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems},
pages = {175–188},
numpages = {14},
location = {New York, New York, USA},
series = {PODS '13}
}

@article{rna,
author = {Anderson, James and Novák, Adám and Sükösd, Zsuzsanna and Golden, Michael and Arunapuram, Preeti and Edvardsson, Ingolfur and Hein, Jotun},
year = {2013},
month = {05},
pages = {149},
title = {Quantifying variances in comparative RNA secondary structure prediction},
volume = {14},
journal = {BMC bioinformatics},
doi = {10.1186/1471-2105-14-149}
}

@article{10.1145/2499370.2462159,
author = {Zhang, Qirun and Lyu, Michael R. and Yuan, Hao and Su, Zhendong},
title = {Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2499370.2462159},
doi = {10.1145/2499370.2462159},
journal = {SIGPLAN Not.},
pages = {435–446},
numpages = {12},
}

@article{arcbool,
author = {Shemetova, Ekaterina and Grigorev, Semyon},
year = {2019},
month = {10},
pages = {211-226},
title = {Path querying on acyclic graphs using Boolean grammars},
volume = {31},
journal = {Proceedings of the Institute for System Programming of RAS},
doi = {10.15514/ISPRAS-2019-31(4)-14}
}

@InProceedings{10.1007/978-3-319-91662-0_17,
author="Santos, Fred C.
and Costa, Umberto S.
and Musicante, Martin A.",
editor="Mikkonen, Tommi
and Klamma, Ralf
and Hern{\'a}ndez, Juan",
title="A Bottom-Up Algorithm for Answering Context-Free Path Queries in Graph Databases",
booktitle="Web Engineering",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="225--233",
isbn="978-3-319-91662-0"
}

@inproceedings{10.1145/3210259.3210264,
author = {Azimov, Rustam and Grigorev, Semyon},
title = {Context-Free Path Querying by Matrix Multiplication},
year = {2018},
isbn = {9781450356954},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3210259.3210264},
doi = {10.1145/3210259.3210264},
articleno = {5},
numpages = {10},
location = {Houston, Texas},
series = {GRADES-NDA '18}
}

@misc{zhang2016contextfree,
      title={Context-Free Path Queries on RDF Graphs}, 
      author={Xiaowang Zhang and Zhiyong Feng and Xin Wang and Guozheng Rao and Wenrui Wu},
      year={2016},
      eprint={1506.00743},
      archivePrefix={arXiv},
      primaryClass={cs.DB}
}

@misc{hellings2016querying,
      title={Querying for Paths in Graphs using Context-Free Path Queries}, 
      author={Jelle Hellings},
      year={2016},
      eprint={1502.02242},
      archivePrefix={arXiv},
      primaryClass={cs.DB}
}

@misc{medeiros2020algorithm,
      title={An Algorithm for Context-Free Path Queries over Graph Databases}, 
      author={Ciro M. Medeiros and Martin A. Musicante and Umberto S. Costa},
      year={2020},
      eprint={2004.03477},
      archivePrefix={arXiv},
      primaryClass={cs.DB}
}

@inproceedings{10.1145/3335783.3335791,
author = {Kuijpers, Jochem and Fletcher, George and Yakovets, Nikolay and Lindaaker, Tobias},
title = {An Experimental Study of Context-Free Path Query Evaluation Methods},
year = {2019},
isbn = {9781450362160},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3335783.3335791},
doi = {10.1145/3335783.3335791},
booktitle = {Proceedings of the 31st International Conference on Scientific and Statistical Database Management},
pages = {121–132},
numpages = {12},
location = {Santa Cruz, CA, USA},
series = {SSDBM '19}
}

@inproceedings{hellingsRelational,
  title={Conjunctive context-free path queries},
  author={Hellings, Jelle},
  booktitle={Proceedings of ICDT'14},
  pages={119--130},
  year={2014}
}

@inproceedings{10.1145/3167132.3167265,
author = {Medeiros, Ciro M. and Musicante, Martin A. and Costa, Umberto S.},
title = {Efficient Evaluation of Context-Free Path Queries for Graph Databases},
year = {2018},
isbn = {9781450351911},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167132.3167265},
doi = {10.1145/3167132.3167265},
abstract = {We present a context-free path query evaluation algorithm inspired by top-down parsing
techniques. Given a graph and a query defined over a context-free grammar, our algorithm
identifies paths on the graph which form words of the language generated by the grammar.
We show that our algorithm is correct. We conduct performance evaluation experiments
with some popular ontologies and synthetic databases to endorse the efficiency of
our approach. The algorithm presents a cubic worst-case runtime complexity in terms
of the number of nodes in the graph, which is an improvement over previous work.},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
pages = {1230–1237},
numpages = {8},
keywords = {graph databases, context-free grammars, top-down parsing, query languages, context-free paths in graphs},
location = {Pau, France},
series = {SAC '18}
}

@inproceedings{10.1145/3398682.3399163,
author = {Terekhov, Arseniy and Khoroshev, Artyom and Azimov, Rustam and Grigorev, Semyon},
title = {Context-Free Path Querying with Single-Path Semantics by Matrix Multiplication},
year = {2020},
isbn = {9781450380218},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3398682.3399163},
doi = {10.1145/3398682.3399163},
abstract = {A recent study showed that the applicability of context-free path querying (CFPQ)
algorithms with relational query semantics integrated with graph databases is limited
because of low performance and high memory consumption of existing solutions. In this
work, we implement a matrix-based CFPQ algorithm by using appropriate high-performance
libraries for linear algebra and integrate it with RedisGraph graph database. Also,
we introduce a new CFPQ algorithm with single-path query semantics that allows us
to extract one found path for each pair of nodes. Finally, we provide the evaluation
of our algorithms for both semantics which shows that matrix-based CFPQ implementation
for Redis-Graph database is performant enough for real-world data analysis.},
booktitle = {Proceedings of the 3rd Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
articleno = {5},
numpages = {12},
keywords = {CUDA, context-free grammar, Context-free path querying, linear algebra, GPGPU, matrix multiplication, Boolean matrix, RedisGraph database, transitive closure, graph databases},
location = {Portland, OR, USA},
series = {GRADES-NDA'20}
}


@InProceedings{10.1007/978-3-662-46663-6_5,
author="Afroozeh, Ali
and Izmaylova, Anastasia",
editor="Franke, Bj{\"o}rn",
title="Faster, Practical GLL Parsing",
booktitle="Compiler Construction",
year="2015",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="89--108",
abstract="Generalized LL (GLL) parsing is an extension of recursivedescent (RD) parsing that supports all context-free grammars in cubic time and space. GLL parsers have the direct relationship with the grammar that RD parsers have, and therefore, compared to GLR, are easier to understand, debug, and extend. This makes GLL parsing attractive for parsing programming languages.",
isbn="978-3-662-46663-6"
}

@article{SCOTT2010177,
title = {GLL Parsing},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {253},
number = {7},
pages = {177-189},
year = {2010},
note = {Proceedings of the Ninth Workshop on Language Descriptions Tools and Applications (LDTA 2009)},
issn = {1571-0661},
doi = {https://doi.org/10.1016/j.entcs.2010.08.041},
url = {https://www.sciencedirect.com/science/article/pii/S1571066110001209},
author = {Elizabeth Scott and Adrian Johnstone},
keywords = {generalised parsing, recursive descent, RNGLR and RIGLR parsing, context free languages},
abstract = {Recursive Descent (RD) parsers are popular because their control flow follows the structure of the grammar and hence they are easy to write and to debug. However, the class of grammars which admit RD parsers is very limited. Backtracking techniques may be used to extend this class, but can have explosive runtimes and cannot deal with grammars with left recursion. Tomita-style RNGLR parsers are fully general but are based on LR techniques and do not have the direct relationship with the grammar that an RD parser has. We develop the fully general GLL parsing technique which is recursive descent-like, and has the property that the parse follows closely the structure of the grammar rules, but uses RNGLR-like machinery to handle non-determinism. The resulting recognisers run in worst-case cubic time and can be built even for left recursive grammars.}
}

@inproceedings{10.5555/1623611.1623625,
author = {Tomita, Masaru},
title = {An Efficient Context-Free Parsing Algorithm for Natural Languages},
year = {1985},
isbn = {0934613028},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
booktitle = {Proceedings of the 9th International Joint Conference on Artificial Intelligence - Volume 2},
pages = {756–764},
numpages = {9},
location = {Los Angeles, California},
series = {IJCAI'85}
}

@inproceedings{10.1145/3166094.3166104,
author = {Grigorev, Semyon and Ragozina, Anastasiya},
title = {Context-Free Path Querying with Structural Representation of Result},
year = {2017},
isbn = {9781450363969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3166094.3166104},
doi = {10.1145/3166094.3166104},
booktitle = {Proceedings of the 13th Central &amp; Eastern European Software Engineering Conference in Russia},
articleno = {10},
numpages = {7},
location = {St. Petersburg, Russia},
series = {CEE-SECR '17}
}

@inproceedings{aa800a73fd714de88f3d9d9c37793e2b,
title = "Evaluation of the context-free path querying algorithm based on matrix multiplication",
abstract = "Recently proposed matrix multiplication based algorithm for context-free path querying (CFPQ) offloads the most performance-critical parts onto boolean matrices multiplication. Thus, it is possible to achieve high performance of CFPQ by means of modern parallel hardware and software. In this paper, we provide results of empirical performance comparison of different implementations of this algorithm on both real-world data and synthetic data for the worst cases.",
keywords = "Boolean matrix, Context-free grammar, Context-free path querying, CUDA, GPGPU, Graph databases, Matrix multiplication, Transitive closure",
author = "Nikita Mishin and Iaroslav Sokolov and Egor Spirin and Vladimir Kutuev and Egor Nemchinov and Sergey Gorbatyuk and Semyon Grigorev",
year = "2019",
month = jun,
day = "30",
doi = "10.1145/3327964.3328503",
language = "English",
editor = "Akhil Arora and Arnab Bhattacharya and George Fletcher",
booktitle = "Proceedings of the ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems",
publisher = "Association for Computing Machinery",
address = "United States",
note = "2nd ACM SIGMOD Joint International Workshop on Graph Data Management Experiences and Systems and Network Data Analytics, GRADES-NDA 2019, co-located with the ACM SIGMOD International Conference on Management of Data 2019 ; Conference date: 30-06-2019",
}

@InProceedings{10.1007/978-3-030-61133-0_7,
author="Hellings, Jelle",
editor="Qin, Lu
and Zhang, Wenjie
and Zhang, Ying
and Peng, You
and Kato, Hiroyuki
and Wang, Wei
and Xiao, Chuan",
title="Explaining Results of Path Queries on Graphs",
booktitle="Software Foundations for Data Interoperability and Large Scale Graph Data Analytics",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="84--98",
abstract="Many graph query languages use, at their core, path queries that yield node pairs that are connected by a path of interest. For the end-user, such node pairs only give limited insight as to why this query result is obtained, as the pair does not directly identify the underlying path of interest. To address this limitation of path queries, we propose the single-path semantics, which evaluates path queries to, for each node pair (m, n), a single path from m to n satisfying the conditions of the query. To put our proposal in practice, we provide an efficient algorithm for evaluating context-free path queries, a particular powerful type of path queries, using the single-path semantics. Additionally, we perform a short evaluation of our techniques that shows that the single-path semantics is practically feasible, even when query results grow large.",
isbn="978-3-030-61133-0"
}

@book{10.5555/1076440, author = {Grune, Dick and Jacobs, Ceriel J. H.}, title = {Parsing Techniques (Monographs in Computer Science)}, year = {2006}, isbn = {038720248X}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg} }

@inproceedings{10.1145/800105.803402,
author = {Beatty, John C.},
title = {Iteration Theorems for LL(k) Languages (Extended Abstract)},
year = {1977},
isbn = {9781450374095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800105.803402},
doi = {10.1145/800105.803402},
abstract = {The classical pumping lemma [BP&amp;S] and Ogden's lemma [Og] are among the most powerful tools we possess for proving that languages are not context-free. Hence one goal of recent research has been to obtain analogous theorems for subclasses of the context-free languages.We establish here a property of LL(k) derivation trees which is analogous to the left part property for strict deterministic grammars[H&amp;H]. We show that our property characterizes LL(k) grammars and use it to establish two iteration theorems for the LL languages. These theorems, in turn, enable us to prove simply and rigorously that a variety of LR languages are not LL. In particular, the “dangling” Algol 60 IF-THEN-ELSE construct allowed in Pascal and PL/1 cannot be generated by an LL(k) grammar.},
booktitle = {Proceedings of the Ninth Annual ACM Symposium on Theory of Computing},
pages = {122–131},
numpages = {10},
location = {Boulder, Colorado, USA},
series = {STOC '77}
}

@article{SCOTT20131828,
title = {GLL parse-tree generation},
journal = {Science of Computer Programming},
volume = {78},
number = {10},
pages = {1828-1844},
year = {2013},
note = {Special section on Language Descriptions Tools and Applications (LDTA’08 & ’09) & Special section on Software Engineering Aspects of Ubiquitous Computing and Ambient Intelligence (UCAmI 2011)},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2012.03.005},
url = {https://www.sciencedirect.com/science/article/pii/S0167642312000627},
author = {Elizabeth Scott and Adrian Johnstone},
keywords = {Generalised parsing, Recursive descent, GLL parsing, RNGLR and RIGLR parsing, Context free languages},
abstract = {Backtracking techniques which are often used to extend recursive descent (RD) parsers can have explosive run-times and cannot deal with grammars with left recursion. GLL parsers are fully general, worst-case cubic parsers which have the recursive descent-like property that they are easy to write and to use for grammar debugging. They have the direct relationship with the grammar that an RD parser has. In this paper we give an algorithm for generating GLL parsers which build an SPPF representation of the derivations of the input, complementing our existing GLL recognition algorithm, and we show that such parsers and recognisers are worst-case cubic.}
}

@inproceedings{GLL1,
author = {Medeiros, Ciro M. and Musicante, Martin A. and Costa, Umberto S.},
title = {Efficient Evaluation of Context-Free Path Queries for Graph Databases},
year = {2018},
isbn = {9781450351911},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167132.3167265},
doi = {10.1145/3167132.3167265},
abstract = {We present a context-free path query evaluation algorithm inspired by top-down parsing techniques. Given a graph and a query defined over a context-free grammar, our algorithm identifies paths on the graph which form words of the language generated by the grammar. We show that our algorithm is correct. We conduct performance evaluation experiments with some popular ontologies and synthetic databases to endorse the efficiency of our approach. The algorithm presents a cubic worst-case runtime complexity in terms of the number of nodes in the graph, which is an improvement over previous work.},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
pages = {1230–1237},
numpages = {8},
keywords = {top-down parsing, context-free paths in graphs, graph databases, context-free grammars, query languages},
location = {Pau, France},
series = {SAC '18}
}

@online{VVP,
    title = "Выпускная квалификационная работа ``Реализация и экспериментальное исследование алгоритма поиска путей с контекстно-свободными ограничениями в графовой базе данных Neo4j`` Погожельской В.В.",
    url  = "https://oops.math.spbu.ru/SE/diploma/2022/pi/Pogozhelskaya-report.pdf",
    note = "(accessed: 05.04.2023)"
}

@article{10.1145/1328897.1328464,
author = {Zheng, Xin and Rugina, Radu},
title = {Demand-Driven Alias Analysis for C},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {43},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/1328897.1328464},
doi = {10.1145/1328897.1328464},
abstract = {This paper presents a demand-driven, flow-insensitive analysisalgorithm for answering may-alias queries. We formulate thecomputation of alias queries as a CFL-reachability problem, and use this formulation to derive a demand-driven analysis algorithm. The analysis uses a worklist algorithm that gradually explores the program structure and stops as soon as enough evidence is gathered to answer the query. Unlike existing techniques, our approach does not require building or intersecting points-to sets.Experiments show that our technique is effective at answering alias queries accurately and efficiently in a demand-driven fashion. For a set of alias queries from the SPEC2000 benchmarks, an implementation of our analysis is able to accurately answer 96% of the queries in 0.5 milliseconds per query on average, using only 65 KB of memory. Compared to a demand-driven points-to analysis that constructs and intersects points-to sets on the fly, our alias analysis can achieve better accuracy while running more than 30 times faster. The low run-time cost and low memory demands of the analysis make it a very good candidate not only for compilers, but also for interactive tools, such as program understanding tools or integrated development environments (IDEs).},
journal = {SIGPLAN Not.},
month = {jan},
pages = {197–208},
numpages = {12},
keywords = {demand-driven analysis, pointer analysis, alias analysis, memory disambiguation, CFL reachability}
}







@article{cfpqs,
author = {Barrett, Chris and Jacob, Riko and Marathe, Madhav},
title = {Formal-Language-Constrained Path Problems},
journal = {SIAM Journal on Computing},
volume = {30},
number = {3},
pages = {809-837},
year = {2000},
doi = {10.1137/S0097539798337716},
URL = {https://doi.org/10.1137/S0097539798337716},
eprint = { https://doi.org/10.1137/S0097539798337716}
}

@article{intro,
author = {Scott, Elizabeth and Johnstone, Adrian},
year = {2010},
month = {09},
pages = {177-189},
title = {GLL parsing},
volume = {253},
journal = {Electr. Notes Theor. Comput. Sci.},
doi = {10.1016/j.entcs.2010.08.041}
}

@inproceedings{GC,
author = {Zheng, Xin and Rugina, Radu},
title = {Demand-Driven Alias Analysis for C},
year = {2008},
isbn = {9781595936899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1328438.1328464},
doi = {10.1145/1328438.1328464},
abstract = {This paper presents a demand-driven, flow-insensitive analysisalgorithm for answering may-alias queries. We formulate thecomputation of alias queries as a CFL-reachability problem, and use this formulation to derive a demand-driven analysis algorithm. The analysis uses a worklist algorithm that gradually explores the program structure and stops as soon as enough evidence is gathered to answer the query. Unlike existing techniques, our approach does not require building or intersecting points-to sets.Experiments show that our technique is effective at answering alias queries accurately and efficiently in a demand-driven fashion. For a set of alias queries from the SPEC2000 benchmarks, an implementation of our analysis is able to accurately answer 96% of the queries in 0.5 milliseconds per query on average, using only 65 KB of memory. Compared to a demand-driven points-to analysis that constructs and intersects points-to sets on the fly, our alias analysis can achieve better accuracy while running more than 30 times faster. The low run-time cost and low memory demands of the analysis make it a very good candidate not only for compilers, but also for interactive tools, such as program understanding tools or integrated development environments (IDEs).},
booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {197–208},
numpages = {12},
keywords = {demand-driven analysis, pointer analysis, CFL reachability, alias analysis, memory disambiguation},
location = {San Francisco, California, USA},
series = {POPL '08}
}


@inproceedings{GLL2,
	doi = {10.1145/3166094.3166104},
  
	url = {https://doi.org/10.1145%2F3166094.3166104},
  
	year = 2017,
	month = {oct},
  
	publisher = {{ACM}
},
  
	author = {Semyon Grigorev and Anastasiya Ragozina},
  
	title = {Context-free path querying with structural representation of result},
  
	booktitle = {Proceedings of the 13th Central {\&}amp$\mathsemicolon$ Eastern European Software Engineering Conference in Russia}
}



@inproceedings{GLR,
author = {Tomita, Masaru},
title = {LR Parsers for Natural Languages},
year = {1984},
publisher = {Association for Computational Linguistics},
address = {USA},
url = {https://doi.org/10.3115/980491.980564},
doi = {10.3115/980491.980564},
abstract = {MLR, an extended LR parser, is introduced, and its application to natural language parsing is discussed. An LR parser is a shift-reduce parser which is deterministically guided by a parsing table. A parsing table can be obtained automatically from a context-free phrase structure grammar. LR parsers cannot manage ambiguous grammars such as natural language grammars, because their parsing tables would have multiply-defined entries, which precludes deterministic parsing. MLR, however, can handle multiply-defined entries, using a dynamic programming method. When an input sentence is ambiguous, the MLR parser produces all possible parse trees without parsing any part of the input sentence more than once in the same way, despite the fact that the parser does not maintain a chart as in chart parsing. Our method also provides an elegant solution to the problem of multi-part-of-speech words such as "that". The MLR parser and its parsing table generator have been implemented at Carnegie-Mellon University.},
booktitle = {Proceedings of the 10th International Conference on Computational Linguistics  and 22nd Annual Meeting on Association for Computational Linguistics},
pages = {354–357},
numpages = {4},
location = {Stanford, California},
series = {ACL '84/COLING '84}
}

@inbook{LR,
author = {Santos, Fred and Costa, Umberto and Musicante, Martin},
year = {2018},
month = {01},
pages = {225-233},
title = {A Bottom-Up Algorithm for Answering Context-Free Path Queries in Graph Databases},
isbn = {978-3-319-91661-3},
doi = {10.1007/978-3-319-91662-0_17}
}

@inproceedings{MultipleSource,
  title={Multiple-Source Context-Free Path Querying in Terms of Linear Algebra},
  author={Arseniy Terekhov and Vlada Pogozhelskaya and Vadim Abzalov and Timur Zinnatulin and Semyon V. Grigorev},
  booktitle={International Conference on Extending Database Technology},
  year={2021}
}